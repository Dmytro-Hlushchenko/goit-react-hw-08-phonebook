{"version":3,"file":"static/js/830.101c1b6d.chunk.js","mappings":"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","sources":["components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/FormInput/FormInput.styled.js","components/FormInput/FormInput .jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    width: 500px;\n`\nexport const Item = styled.li`\n display: flex;\nborder: 1px solid black;\njustify-content: space-between;\n`\nexport const DeleteBtn = styled.button`\n    background-color: grey;\n    \n`","import { getContacts, getError, getFilter, getLoading } from \"redux/selectors\";\nimport { List, Item, DeleteBtn } from \"./ContactList.styled\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContactThunk } from \"redux/operations\";\n\n\nexport default function ContactsList () {\n\n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n    const isLoading = useSelector(getLoading);\n    const error = useSelector(getError);\n    const dispatch = useDispatch();\n\n\n    const filteredContacts = () => {\n        const lowerCaseFilter = filter.toLocaleLowerCase();\n        return contacts.filter(contact => contact.name.toLocaleLowerCase().includes(lowerCaseFilter));\n    };\n    \nreturn(\n    <div>\n        <List>\n            {isLoading && !error && <b>  Loading...</b>}\n            {error && <p>{error.message}</p>}\n            {filteredContacts().map(item => (\n                <Item key={item.id}>\n                        <p>{item.name} {item.number} </p>\n                        <DeleteBtn \n                        onClick={() => dispatch(deleteContactThunk(item.id))}\n                        >Delete\n                        </DeleteBtn>\n                </Item>\n            ))}\n        </List>\n    </div>\n    )\n};","import { useDispatch } from \"react-redux\";\nimport { filterContacts } from \"redux/filterSlice\";\n\n\nexport default function Filter () {\n    const dispatch = useDispatch();\n   \n   const onInputFilterName = value => {\n        const newFilter = value;\n        dispatch(filterContacts(newFilter))\n    };\n\n    return (\n        <div>\n                <label>Find contacts by name: \n                <input type=\"text\" \n                onChange={evt => onInputFilterName(evt.target.value)}/>\n                </label>\n        </div>\n    )\n}","import styled from \"styled-components\";\nimport * as Yup from 'yup';\n\nexport const InputFields = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    margin-left: 40px;\n   \n`\n\nexport const AddBtn = styled.button`\n    width: 304px;\n`\n\nexport const SubmitSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Z\\s]+$/, 'Only letters are allowed')\n    .min(2, 'Too Short!')\n    .required('Please fill that'),\n  number: Yup.string()\n    .matches(/^\\d{3}-\\d{2}-\\d{2}$/, 'Must be in format: 000-00-00')\n    .required('This field is required, please fill that'),\n});","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { InputFields, AddBtn } from './FormInput.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContactThunk } from 'redux/operations';\nimport { SubmitSchema } from './FormInput.styled';\nimport { getContacts } from 'redux/selectors';\n   \nexport default function FormInput() {\n\n  const dispatch = useDispatch();\n  const prevContacts = useSelector(getContacts);\n\n  const onFormSubmit = data => {\n    \n    const isExist = prevContacts.some(\n      ({ name }) => name.toLocaleLowerCase() === data.name.toLocaleLowerCase());\n            \n    if (isExist) {\n      alert(`$This Name is already in contacts.`);\n      return;\n    };\n    \n    const newContact = data;\n    dispatch(addContactThunk(newContact));\n  };\n    \n    return(\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={SubmitSchema}\n\n        onSubmit={(values, actions) => {\n          onFormSubmit(values);\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <InputFields>\n            <label>Name:\n            <Field \n              name=\"name\"\n              placeholder=\"Jane\"/>\n              <ErrorMessage name=\"name\" />\n            </label>\n            <label>Number:\n            <Field \n              name=\"number\"\n              placeholder=\"658-58-69\"\n              type=\"tel\"/>\n              <ErrorMessage name=\"number\" />\n            </label>\n            <AddBtn type=\"submit\">Add contact</AddBtn>\n          </InputFields>\n        </Form> \n    </Formik>\n    )\n}","import ContactsList from \"components/ContactsList\";\nimport Filter from \"components/Filter/\";\nimport FormInput from \"components/FormInput\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContactsThunk } from \"redux/operations\";\nimport { getFilter, selectRegistrated} from \"redux/selectors\";\n\n\nexport default function ContactsPage() {\n    const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const registrated = useSelector(selectRegistrated)\n\n  useEffect(() => {\n    if (!registrated) return;\n    dispatch(fetchContactsThunk());\n  }, [registrated, dispatch]);\n\n  return (\n    <div>\n      <p>Phonebook</p>\n      <FormInput />\n      <p>Contacts</p>\n      {<Filter filter={filter} />}\n      <ContactsList />\n    </div>\n  )\n};"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","DeleteBtn","_templateObject3","ContactsList","contacts","useSelector","getContacts","filter","getFilter","isLoading","getLoading","error","getError","dispatch","useDispatch","_jsx","children","_jsxs","message","lowerCaseFilter","toLocaleLowerCase","contact","name","includes","filteredContacts","map","item","number","onClick","deleteContactThunk","id","Filter","type","onChange","evt","value","newFilter","filterContacts","onInputFilterName","target","InputFields","AddBtn","SubmitSchema","Yup","shape","matches","min","required","FormInput","prevContacts","Formik","initialValues","validationSchema","onSubmit","values","actions","data","some","_ref","alert","newContact","addContactThunk","onFormSubmit","resetForm","Form","Field","placeholder","ErrorMessage","ContactsPage","registrated","selectRegistrated","useEffect","fetchContactsThunk"],"sourceRoot":""}